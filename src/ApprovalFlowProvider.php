<?php

namespace Js3\ApprovalFlow;


use Illuminate\Contracts\Support\DeferrableProvider;
use Illuminate\Support\ServiceProvider;
use Js3\ApprovalFlow\Encrypter\AesEncrypter;
use Js3\ApprovalFlow\Encrypter\Encrypter;

/**
 * @explain:
 * @author: wzm
 * @date: 2024/5/16 15:33
 */
class ApprovalFlowProvider extends ServiceProvider implements DeferrableProvider
{

    /**
     * @explain: 注册服务
     * @author: wzm
     * @date: 2024/5/16 15:59
     * @remark:
     */
    public function register()
    {
        $this->mergeConfigFrom(
            __DIR__.'/config/approval-flow.php', 'approval-flow'
        );

        $this->registerProvider();
    }

    /**
     * @explain:引导方法
     * @author: wzm
     * @date: 2024/5/16 15:59
     * @remark:
     */
    public function boot()
    {
       $this->publishes([
           __DIR__ . '/config/approval-flow.php' => config_path('approval-flow.php'),
       ]);
    }

    /**
     * @explain:指定要延迟加载的服务
     * @return array
     * @author: wzm
     * @date: 2024/5/16 15:58
     * @remark:
     */
    public function provides()
    {
        return parent::provides(); // TODO: Change the autogenerated stub
    }



    protected function registerProvider() {
        //实例化默认加密方法
        $this->app->singleton(AesEncrypter::class, function () {
            return new AesEncrypter(
                config("approval-flow.aes.key"),
                config("approval-flow.aes.iv")
            );
        });
        //用户可自定义加密类，只要实现了
        $this->app->singleton(Encrypter::class,function () {
            return $this->app->make(config("approval-flow.provider.encrypter"));
        });
    }
}
